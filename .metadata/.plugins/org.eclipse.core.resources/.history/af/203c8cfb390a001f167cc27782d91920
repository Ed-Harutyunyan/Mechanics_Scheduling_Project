import java.awt.*;
import java.awt.event.*;
import java.util.Random;

import javax.swing.*;

public class TimeTable extends JFrame implements ActionListener {

	private JPanel screen = new JPanel(), tools = new JPanel();
	private JButton tool[];
	private JTextField field[];
	private CourseArray courses;
	private Color CRScolor[] = {Color.RED, Color.GREEN, Color.BLACK};
	private int minClashes;
	private int shifts;
	private Autoassociator autoassociator;

	
	public TimeTable(int slots, int iterations, int shifts) {
		super("Dynamic Time Table");
		setSize(500, 800);
		setLayout(new FlowLayout());
		
		screen.setPreferredSize(new Dimension(400, 800));
		add(screen);
		
		setTools(slots, iterations, shifts);
		add(tools);
		
		autoassociator = new Autoassociator(null);
		
		setVisible(true);
	}
	
	public void setMinClashes(int min) {
		this.minClashes = min;
	}
	
	public void setShifts(int shifts) {
		this.shifts = shifts;
	}
	
	public int getMinClashes() {
		return this.minClashes;
	}
	
	public int getShifts() {
		return this.shifts;
	}
	
	public void setTools(int slots, int iterations, int shifts) {
		String capField[] = {"Slots:", "Courses:", "Clash File:", "Iters:", "Shift:"};
		field = new JTextField[capField.length];
		
		String capButton[] = {"Load", "Start", "Step", "Print", "Exit"};
		tool = new JButton[capButton.length];
		
		tools.setLayout(new GridLayout(2 * capField.length + capButton.length, 1));
		
		for (int i = 0; i < field.length; i++) {
			tools.add(new JLabel(capField[i]));
			field[i] = new JTextField(5);
			tools.add(field[i]);
		}
		
		for (int i = 0; i < tool.length; i++) {
			tool[i] = new JButton(capButton[i]);
			tool[i].addActionListener(this);
			tools.add(tool[i]);
		}
		
		field[0].setText(Integer.toString(slots));
		field[1].setText("381");
		field[2].setText("lse-f-91.stu");
		field[3].setText(Integer.toString(iterations));
		field[4].setText(Integer.toString(shifts));
				
	}
	
	public void draw() {
		Graphics g = screen.getGraphics();
		int width = Integer.parseInt(field[0].getText()) * 10;
		for (int courseIndex = 1; courseIndex < courses.length(); courseIndex++) {
			g.setColor(CRScolor[courses.status(courseIndex) > 0 ? 0 : 1]);
			g.drawLine(0, courseIndex, width, courseIndex);
			g.setColor(CRScolor[CRScolor.length - 1]);
			g.drawLine(10 * courses.slot(courseIndex), courseIndex, 10 * courses.slot(courseIndex) + 10, courseIndex);
		}
	}
	
	private int getButtonIndex(JButton source) {
		int result = 0;
		while (source != tool[result]) result++;
		return result;
	}
	
	public void actionPerformed(ActionEvent click) {
		int min, step, clashes;

        switch (getButtonIndex((JButton) click.getSource())) {
            case 0:
                // Load courses and initialize Autoassociator
                int slots = Integer.parseInt(field[0].getText());
                courses = new CourseArray(Integer.parseInt(field[1].getText()) + 1, slots);
                courses.readClashes(field[2].getText());
                autoassociator = new Autoassociator(courses);
                draw();
                break;
            case 1:
                // Start scheduling
                min = Integer.MAX_VALUE;
                step = 0;
                for (int i = 1; i < courses.length(); i++) courses.setSlot(i, 0);

                for (int iteration = 1; iteration <= Integer.parseInt(field[3].getText()); iteration++) {
                    courses.iterate(Integer.parseInt(field[4].getText()));
                    draw();
                    clashes = courses.clashesLeft();
                    if (clashes < min) {
                        min = clashes;
                        step = iteration;
                    }
                }
                autoassociator.training(courses.getSlots()); // Train Autoassociator
                autoassociator.fullUpdate(courses.getSlots()); // Update until final state achieved
                System.out.println("Shift = " + field[4].getText() + "\tMin clashes = " + min + "\tat step " + step);
                setVisible(true);
                break;
            case 2:
                // Step scheduling
                courses.iterate(Integer.parseInt(field[4].getText()));
                draw();
                break;
            case 3:
                // Print current configuration
                System.out.println("Exam\tSlot\tClashes");
                for (int i = 1; i < courses.length(); i++)
                    System.out.println(i + "\t" + courses.slot(i) + "\t" + courses.status(i));
                break;
            case 4:
                System.exit(0); // Exit application
                break;
        }
	}

	public static void main(String[] args) {
		
		Random random = new Random();

	    TimeTable tb = new TimeTable(17, 10, 10);

	    SwingUtilities.invokeLater(() -> {
	        tb.tool[0].doClick();

	        SwingUtilities.invokeLater(() -> {
	            tb.tool[1].doClick();

	            SwingUtilities.invokeLater(() -> {
	                for (int i = 0; i < 1000; i++) {
	                    int shifts = random.nextInt(1000) + 1;
	                    int iterations = random.nextInt(1000) + 1;
	                    
	                    tb.setTools(17, iterations, shifts);
	                    
	                    tb.tool[1].doClick();
	                }
	            });
	        });
	    });
		
	}
}
