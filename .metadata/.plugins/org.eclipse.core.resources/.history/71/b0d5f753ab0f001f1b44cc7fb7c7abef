import java.awt.*;
import java.awt.event.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Random;
import java.util.ArrayList;
import java.util.List;

import javax.swing.*;

public class TimeTable extends JFrame implements ActionListener {

	private JPanel screen = new JPanel(), tools = new JPanel();
	private JButton tool[], continueButton;
	private JTextField field[];
	private CourseArray courses;
	private Color CRScolor[] = {Color.RED, Color.GREEN, Color.BLACK};
	private String fileName;
    private Autoassociator autoassociator;
	
	
	public TimeTable(int slots, int iterations, int shifts, String fileName) {
		super("Dynamic Time Table");
		setSize(800, 800);
		setLayout(new FlowLayout());
		
		screen.setPreferredSize(new Dimension(400, 800));
		add(screen);
		
		setTools(slots, iterations, shifts, fileName);
		add(tools);
				
		
		setVisible(true);
	}
	
	public CourseArray getC() {
		return this.courses;
	}
	
	public void setTools(int slots, int iterations, int shifts, String fileName) {
		String capField[] = {"Slots:", "Courses:", "Clash File:", "Iters:", "Shift:"};
		field = new JTextField[capField.length];
		
		String capButton[] = {"Load", "Start", "Step", "Print", "Exit", "Continue" };
		tool = new JButton[capButton.length];
		
		tools.setLayout(new GridLayout(2 * capField.length + capButton.length, 1));
		
		for (int i = 0; i < field.length; i++) {
			tools.add(new JLabel(capField[i]));
			field[i] = new JTextField(5);
			tools.add(field[i]);
		}
		
		for (int i = 0; i < tool.length; i++) {
			tool[i] = new JButton(capButton[i]);
			tool[i].addActionListener(this);
			tools.add(tool[i]);
		}
		
		
		field[0].setText(Integer.toString(slots));
		field[1].setText("136");
		field[2].setText(fileName);
		field[3].setText(Integer.toString(iterations));
		field[4].setText(Integer.toString(shifts));
				
	}
	
	public void draw() {
		Graphics g = screen.getGraphics();
		int width = Integer.parseInt(field[0].getText()) * 10;
		for (int courseIndex = 1; courseIndex < courses.length(); courseIndex++) {
			g.setColor(CRScolor[courses.status(courseIndex) > 0 ? 0 : 1]);
			g.drawLine(0, courseIndex, width, courseIndex);
			g.setColor(CRScolor[CRScolor.length - 1]);
			g.drawLine(10 * courses.slot(courseIndex), courseIndex, 10 * courses.slot(courseIndex) + 10, courseIndex);
		}
	}
	
	private int getButtonIndex(JButton source) {
		int result = 0;
		while (source != tool[result]) result++;
		return result;
	}
	
	public void actionPerformed(ActionEvent click) {
		int min, step, clashes;
		
		switch (getButtonIndex((JButton) click.getSource())) {
		case 0:
			int slots = Integer.parseInt(field[0].getText());
			courses = new CourseArray(Integer.parseInt(field[1].getText()) + 1, slots);
			courses.readClashes(field[2].getText());
			draw();
			break;
		case 1:
			min = Integer.MAX_VALUE;
			step = 0;
			for (int i = 1; i < courses.length(); i++) courses.setSlot(i, 0);
			
			for (int iteration = 1; iteration <= Integer.parseInt(field[3].getText()); iteration++) {
				courses.iterate(Integer.parseInt(field[4].getText()));
				draw();
				clashes = courses.clashesLeft();
				if (clashes < min) {
					min = clashes;
					step = iteration;
				}
			}
			System.out.println("Iterations = " + field[3].getText() + " Shift = " + field[4].getText() + "\tMin clashes = " + min + "\tat step " + step);
			setVisible(true);
			break;
		case 2:
			courses.iterate(Integer.parseInt(field[4].getText()));
			draw();
			System.out.println(courses.slotStatus(1)[1]);
			break;
		case 3:
			System.out.println("Exam\tSlot\tClashes");
			for (int i = 1; i < courses.length(); i++)
				System.out.println(i + "\t" + courses.slot(i) + "\t" + courses.status(i));
			break;
		case 4:
			System.exit(0);
			
		case 5:
            min = Integer.MAX_VALUE;
            step = 0;
            for (int iteration = 1; iteration <= Integer.parseInt(field[3].getText()); iteration++) {
                courses.iterate(Integer.parseInt(field[4].getText()));
                draw();
                clashes = courses.clashesLeft();
                if (clashes < min) {
                    min = clashes;
                    step = iteration;
                }
            }
            System.out.println("Continuing from the current state...");
            System.out.println("Iterations = " + field[3].getText() + " Shift = " + field[4].getText()
                    + "\tMin clashes = " + min + "\tat step " + step);
            setVisible(true);
            break;
		}
		
	}
	
	public void trainAutoassociator(String csvFilePath) {
	    List<int[]> trainingExamples = readTrainingExamplesFromCSV(csvFilePath);
	    autoassociator = new Autoassociator(getC());
	    for (int[] example : trainingExamples) {
	        autoassociator.training(example);
	    }
	}

	private List<int[]> readTrainingExamplesFromCSV(String csvFilePath) {
	    List<int[]> trainingExamples = new ArrayList<>();
	    try (BufferedReader br = new BufferedReader(new FileReader(csvFilePath))) {
	        String line;
	        while ((line = br.readLine()) != null) {
	            String[] parts = line.trim().split("\\s+");
	            int[] example = new int[parts.length];
	            for (int i = 0; i < parts.length; i++) {
	                example[i] = Integer.parseInt(parts[i]);
	            }
	            trainingExamples.add(example);
	        }
	    } catch (IOException e) {
	        e.printStackTrace();
	    }
	    return trainingExamples;
	}

	public static void main(String[] args) {

	    TimeTable tbSTA = new TimeTable(13, 10, 10, "sta-f-83.stu");
	    //TimeTable tbUTA = new TimeTable(30, 10, 10, "uta-s-93.stu");
		

	    String trainingExamplesFilePath = "/SchedulingCS140/sta-f-83_stu_example.csv/";
	    
	    tbSTA.trainAutoassociator(trainingExamplesFilePath);
	    
	   
	    
//	    Random random = new Random();
//		/SchedulingCS140/sta-f-83_stu_examples - Sheet1.csv
//	    SwingUtilities.invokeLater(() -> {
//	        tb.tool[0].doClick();
//
//	        SwingUtilities.invokeLater(() -> {
//	            tb.tool[1].doClick();
//
//	            SwingUtilities.invokeLater(() -> {
//	                for (int i = 0; i < 1000; i++) {
//	                    int shifts = random.nextInt(1000) + 1;
//	                    int iterations = random.nextInt(1000) + 1;
//	                    
//	                    tb.setTools(17, iterations, shifts);
//	                    
//	                    tb.tool[1].doClick();
//	                }
//	            });
//	        });
//	    });
	    
	    
		
	}
}
